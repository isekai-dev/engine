'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var isekai = _interopDefault(require('isekai'));
var express = _interopDefault(require('express'));
var fs = _interopDefault(require('fs'));
var https = _interopDefault(require('https'));
var http = _interopDefault(require('http'));

var LOG = ({
    LOG: {
        left = `|⚙>`,
        right = `<⚙|`
    },
    SET
}) => {
    const LOG = {
        left,
        right,

        log: (...args) => {
            console.log(`\t`, ...args);
        },

        info: (...args) => {
            console.log(LOG.left, `\t`, ...args, `\t`, LOG.right);
        },

        section: (title, body) => {
            LOG.info(title);
            LOG(body);
            LOG(`\r`);
        }
    };

    SET({
        LOG: Object.assign(LOG.log, LOG)
    });
};

var HTTP = ({
    LOG,
    HTTP: {
        ssl = false
    },
    SET
}) => {
    const app = express();

    if(!LOG) {
        console.log(`[HTTP] REQUIRES [LOG]`);
        
        return;
    }

    if(ssl) {
        https.createServer({
            key: fs.readFileSync(`${ssl}/privkey.pem`),
            cert: fs.readFileSync(`${ssl}/cert.pem`),
            ca: fs.readFileSync(`${ssl}/fullchain.pem`)
        }, app).
            listen(443, () => {
                LOG.info(`[HTTPS]`);
                LOG(`BIFROST SECURED`);
            });

        const redirectApp = express();
    
        LOG(`Redirecting to HTTP to HTTPS`);

        redirectApp.all(`*`, (req, res) => {  
            res.redirect(`https://${req.headers.host}${req.url}`);
            res.end();
        });

        http.createServer(redirectApp).
            listen(80);

    } else {
        app.listen(8080, () => {
            LOG.info(`⚠️[HTTP]⚠️`);
            LOG(`BIFROST INSECURE`);
            LOG(`Listening on http://localhost:8080`);
        });
    }
    
    SET({
        HTTP: app
    });
};

var HTTP_API = ({ 
    HTTP,
    SET
}) => {
    SET({
        HTTP_API: HTTP.use(express.json())
    });
};

var HTTP_PUBLIC = ({
    HTTP
}) => {
    HTTP.use(express.static(`../BAG/HTTP_PUBLIC`));
};

isekai.SET({"NODE":{},"LOG":{},"HTTP":{"port":8080},"HTTP_API":{},"HTTP_PUBLIC":{}});

isekai.EQUIP({
    LOG,
    HTTP,
    HTTP_API,
    HTTP_PUBLIC,
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNla2FpX2Rldi5OT0RFLmpzIiwic291cmNlcyI6WyIuLi9TSE9QL0xPRy9pbmRleC5qcyIsIi4uL1NIT1AvSFRUUC9pbmRleC5qcyIsIi4uL1NIT1AvSFRUUF9BUEkvaW5kZXguanMiLCIuLi9TSE9QL0hUVFBfUFVCTElDL2luZGV4LmpzIiwiaXNla2FpX2Rldi5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAoe1xyXG4gICAgTE9HOiB7XHJcbiAgICAgICAgbGVmdCA9IGB84pqZPmAsXHJcbiAgICAgICAgcmlnaHQgPSBgPOKamXxgXHJcbiAgICB9LFxyXG4gICAgU0VUXHJcbn0pID0+IHtcclxuICAgIGNvbnN0IExPRyA9IHtcclxuICAgICAgICBsZWZ0LFxyXG4gICAgICAgIHJpZ2h0LFxyXG5cclxuICAgICAgICBsb2c6ICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcXHRgLCAuLi5hcmdzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbmZvOiAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhMT0cubGVmdCwgYFxcdGAsIC4uLmFyZ3MsIGBcXHRgLCBMT0cucmlnaHQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNlY3Rpb246ICh0aXRsZSwgYm9keSkgPT4ge1xyXG4gICAgICAgICAgICBMT0cuaW5mbyh0aXRsZSk7XHJcbiAgICAgICAgICAgIExPRyhib2R5KTtcclxuICAgICAgICAgICAgTE9HKGBcXHJgKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFNFVCh7XHJcbiAgICAgICAgTE9HOiBPYmplY3QuYXNzaWduKExPRy5sb2csIExPRylcclxuICAgIH0pO1xyXG59OyIsIlxyXG5pbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XHJcblxyXG5pbXBvcnQgaHR0cHMgZnJvbSBcImh0dHBzXCI7XHJcbmltcG9ydCBodHRwIGZyb20gXCJodHRwXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoe1xyXG4gICAgTE9HLFxyXG4gICAgSFRUUDoge1xyXG4gICAgICAgIHNzbCA9IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgU0VUXHJcbn0pID0+IHtcclxuICAgIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuXHJcbiAgICBpZighTE9HKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFtIVFRQXSBSRVFVSVJFUyBbTE9HXWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZihzc2wpIHtcclxuICAgICAgICBodHRwcy5jcmVhdGVTZXJ2ZXIoe1xyXG4gICAgICAgICAgICBrZXk6IGZzLnJlYWRGaWxlU3luYyhgJHtzc2x9L3ByaXZrZXkucGVtYCksXHJcbiAgICAgICAgICAgIGNlcnQ6IGZzLnJlYWRGaWxlU3luYyhgJHtzc2x9L2NlcnQucGVtYCksXHJcbiAgICAgICAgICAgIGNhOiBmcy5yZWFkRmlsZVN5bmMoYCR7c3NsfS9mdWxsY2hhaW4ucGVtYClcclxuICAgICAgICB9LCBhcHApLlxyXG4gICAgICAgICAgICBsaXN0ZW4oNDQzLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMT0cuaW5mbyhgW0hUVFBTXWApO1xyXG4gICAgICAgICAgICAgICAgTE9HKGBCSUZST1NUIFNFQ1VSRURgKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlZGlyZWN0QXBwID0gZXhwcmVzcygpO1xyXG4gICAgXHJcbiAgICAgICAgTE9HKGBSZWRpcmVjdGluZyB0byBIVFRQIHRvIEhUVFBTYCk7XHJcblxyXG4gICAgICAgIHJlZGlyZWN0QXBwLmFsbChgKmAsIChyZXEsIHJlcykgPT4geyAgXHJcbiAgICAgICAgICAgIHJlcy5yZWRpcmVjdChgaHR0cHM6Ly8ke3JlcS5oZWFkZXJzLmhvc3R9JHtyZXEudXJsfWApO1xyXG4gICAgICAgICAgICByZXMuZW5kKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGh0dHAuY3JlYXRlU2VydmVyKHJlZGlyZWN0QXBwKS5cclxuICAgICAgICAgICAgbGlzdGVuKDgwKTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFwcC5saXN0ZW4oODA4MCwgKCkgPT4ge1xyXG4gICAgICAgICAgICBMT0cuaW5mbyhg4pqg77iPW0hUVFBd4pqg77iPYCk7XHJcbiAgICAgICAgICAgIExPRyhgQklGUk9TVCBJTlNFQ1VSRWApO1xyXG4gICAgICAgICAgICBMT0coYExpc3RlbmluZyBvbiBodHRwOi8vbG9jYWxob3N0OjgwODBgKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgU0VUKHtcclxuICAgICAgICBIVFRQOiBhcHBcclxuICAgIH0pO1xyXG59OyIsIlxyXG5pbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHsgXHJcbiAgICBIVFRQLFxyXG4gICAgU0VUXHJcbn0pID0+IHtcclxuICAgIFNFVCh7XHJcbiAgICAgICAgSFRUUF9BUEk6IEhUVFAudXNlKGV4cHJlc3MuanNvbigpKVxyXG4gICAgfSk7XHJcbn07XHJcbiIsImltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoe1xyXG4gICAgSFRUUFxyXG59KSA9PiB7XHJcbiAgICBIVFRQLnVzZShleHByZXNzLnN0YXRpYyhgLi4vQkFHL0hUVFBfUFVCTElDYCkpO1xyXG59O1xyXG5cclxuIiwiaW1wb3J0IGlzZWthaSBmcm9tIFwiaXNla2FpXCI7XHJcbmlzZWthaS5TRVQoe1wiTk9ERVwiOnt9LFwiTE9HXCI6e30sXCJIVFRQXCI6e1wicG9ydFwiOjgwODB9LFwiSFRUUF9BUElcIjp7fSxcIkhUVFBfUFVCTElDXCI6e319KTtcclxuXHJcbmltcG9ydCBMT0cgZnJvbSBcIi4uL1NIT1AvTE9HL2luZGV4LmpzXCI7XHJcbmltcG9ydCBIVFRQIGZyb20gXCIuLi9TSE9QL0hUVFAvaW5kZXguanNcIjtcclxuaW1wb3J0IEhUVFBfQVBJIGZyb20gXCIuLi9TSE9QL0hUVFBfQVBJL2luZGV4LmpzXCI7XHJcbmltcG9ydCBIVFRQX1BVQkxJQyBmcm9tIFwiLi4vU0hPUC9IVFRQX1BVQkxJQy9pbmRleC5qc1wiO1xyXG5cbmlzZWthaS5FUVVJUCh7XHJcbiAgICBMT0csXHJcbiAgICBIVFRQLFxyXG4gICAgSFRUUF9BUEksXHJcbiAgICBIVFRQX1BVQkxJQyxcclxufSk7XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsVUFBZSxDQUFDO0lBQ1osR0FBRyxFQUFFO1FBQ0QsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ1osS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDO0tBQ2hCO0lBQ0QsR0FBRztDQUNOLEtBQUs7SUFDRixNQUFNLEdBQUcsR0FBRztRQUNSLElBQUk7UUFDSixLQUFLOztRQUVMLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxLQUFLO1lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDOUI7O1FBRUQsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLEtBQUs7WUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6RDs7UUFFRCxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxLQUFLO1lBQ3RCLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ1YsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNi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
