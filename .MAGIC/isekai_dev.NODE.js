'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var isekai = _interopDefault(require('isekai'));
var express = _interopDefault(require('express'));
var fs = _interopDefault(require('fs'));
var https = _interopDefault(require('https'));
var http = _interopDefault(require('http'));

var LOG_equip = ({
    LOG: {
        left = `|⚙>`,
        right = `<⚙|`
    },
    SET
}) => {
    const LOG = {
        left,
        right,

        log: (...args) => {
            console.log(`\t`, ...args);
        },

        info: (...args) => {
            console.log(LOG.left, `\t`, ...args, `\t`, LOG.right);
        },

        section: (title, body) => {
            LOG.info(title);
            LOG(body);
            LOG(`\r`);
        }
    };

    SET({
        LOG: Object.assign(LOG.log, LOG)
    });
};

var HTTP = ({
    LOG,
    HTTP: {
        ssl = false
    },
    SET, 
    EQUIP
}) => {
    const app = express();

    if(!LOG) {
        console.log(`EQUIPING LOG`);
        EQUIP({
            LOG: LOG_equip
        });
    }

    if(ssl) {
        https.createServer({
            key: fs.readFileSync(`${ssl}/privkey.pem`),
            cert: fs.readFileSync(`${ssl}/cert.pem`),
            ca: fs.readFileSync(`${ssl}/fullchain.pem`)
        }, app).
            listen(443, () => {
                LOG.info(`[HTTPS]`);
                LOG(`BIFROST SECURED`);
            });

        const redirectApp = express();
    
        LOG(`Redirecting to HTTP to HTTPS`);

        redirectApp.all(`*`, (req, res) => {  
            res.redirect(`https://${req.headers.host}${req.url}`);
            res.end();
        });

        http.createServer(redirectApp).
            listen(80);

    } else {
        app.listen(8080, () => {
            LOG.info(`⚠️[HTTP]⚠️`);
            LOG(`BIFROST INSECURE`);
            LOG(`Listening on port 8080`);
        });
    }
    
    SET({
        HTTP: {
            app
        }
    });
};

var HTTP_API = ({ 
    HTTP,
    SET
}) => {
    SET({
        HTTP_API: HTTP.use(express.json())
    });
};

var HTTP_PUBLIC = ({
    HTTP
}) => {
    HTTP.use(express.static(`../BAG/HTTP_PUBLIC`));
};

isekai.SET({"NODE":{},"HTTP":{"port":8080},"HTTP_API":{},"HTTP_PUBLIC":{}});
isekai.EQUIP({
	HTTP,
	HTTP_API,
	HTTP_PUBLIC,
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNla2FpX2Rldi5OT0RFLmpzIiwic291cmNlcyI6WyIuLi9TSE9QL0xPRy9pbmRleC5qcyIsIi4uL1NIT1AvSFRUUC9pbmRleC5qcyIsIi4uL1NIT1AvSFRUUF9BUEkvaW5kZXguanMiLCIuLi9TSE9QL0hUVFBfUFVCTElDL2luZGV4LmpzIiwiaXNla2FpX2Rldi5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAoe1xyXG4gICAgTE9HOiB7XHJcbiAgICAgICAgbGVmdCA9IGB84pqZPmAsXHJcbiAgICAgICAgcmlnaHQgPSBgPOKamXxgXHJcbiAgICB9LFxyXG4gICAgU0VUXHJcbn0pID0+IHtcclxuICAgIGNvbnN0IExPRyA9IHtcclxuICAgICAgICBsZWZ0LFxyXG4gICAgICAgIHJpZ2h0LFxyXG5cclxuICAgICAgICBsb2c6ICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcXHRgLCAuLi5hcmdzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbmZvOiAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhMT0cubGVmdCwgYFxcdGAsIC4uLmFyZ3MsIGBcXHRgLCBMT0cucmlnaHQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNlY3Rpb246ICh0aXRsZSwgYm9keSkgPT4ge1xyXG4gICAgICAgICAgICBMT0cuaW5mbyh0aXRsZSk7XHJcbiAgICAgICAgICAgIExPRyhib2R5KTtcclxuICAgICAgICAgICAgTE9HKGBcXHJgKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFNFVCh7XHJcbiAgICAgICAgTE9HOiBPYmplY3QuYXNzaWduKExPRy5sb2csIExPRylcclxuICAgIH0pO1xyXG59OyIsIlxyXG5pbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XHJcblxyXG5pbXBvcnQgaHR0cHMgZnJvbSBcImh0dHBzXCI7XHJcbmltcG9ydCBodHRwIGZyb20gXCJodHRwXCI7XHJcbmltcG9ydCBMT0dfZXF1aXAgZnJvbSBcIi4uL0xPRy9pbmRleC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHtcclxuICAgIExPRyxcclxuICAgIEhUVFA6IHtcclxuICAgICAgICBzc2wgPSBmYWxzZVxyXG4gICAgfSxcclxuICAgIFNFVCwgXHJcbiAgICBFUVVJUFxyXG59KSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG4gICAgaWYoIUxPRykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBFUVVJUElORyBMT0dgKTtcclxuICAgICAgICBFUVVJUCh7XHJcbiAgICAgICAgICAgIExPRzogTE9HX2VxdWlwXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoc3NsKSB7XHJcbiAgICAgICAgaHR0cHMuY3JlYXRlU2VydmVyKHtcclxuICAgICAgICAgICAga2V5OiBmcy5yZWFkRmlsZVN5bmMoYCR7c3NsfS9wcml2a2V5LnBlbWApLFxyXG4gICAgICAgICAgICBjZXJ0OiBmcy5yZWFkRmlsZVN5bmMoYCR7c3NsfS9jZXJ0LnBlbWApLFxyXG4gICAgICAgICAgICBjYTogZnMucmVhZEZpbGVTeW5jKGAke3NzbH0vZnVsbGNoYWluLnBlbWApXHJcbiAgICAgICAgfSwgYXBwKS5cclxuICAgICAgICAgICAgbGlzdGVuKDQ0MywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgTE9HLmluZm8oYFtIVFRQU11gKTtcclxuICAgICAgICAgICAgICAgIExPRyhgQklGUk9TVCBTRUNVUkVEYCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCByZWRpcmVjdEFwcCA9IGV4cHJlc3MoKTtcclxuICAgIFxyXG4gICAgICAgIExPRyhgUmVkaXJlY3RpbmcgdG8gSFRUUCB0byBIVFRQU2ApO1xyXG5cclxuICAgICAgICByZWRpcmVjdEFwcC5hbGwoYCpgLCAocmVxLCByZXMpID0+IHsgIFxyXG4gICAgICAgICAgICByZXMucmVkaXJlY3QoYGh0dHBzOi8vJHtyZXEuaGVhZGVycy5ob3N0fSR7cmVxLnVybH1gKTtcclxuICAgICAgICAgICAgcmVzLmVuZCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBodHRwLmNyZWF0ZVNlcnZlcihyZWRpcmVjdEFwcCkuXHJcbiAgICAgICAgICAgIGxpc3Rlbig4MCk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhcHAubGlzdGVuKDgwODAsICgpID0+IHtcclxuICAgICAgICAgICAgTE9HLmluZm8oYOKaoO+4j1tIVFRQXeKaoO+4j2ApO1xyXG4gICAgICAgICAgICBMT0coYEJJRlJPU1QgSU5TRUNVUkVgKTtcclxuICAgICAgICAgICAgTE9HKGBMaXN0ZW5pbmcgb24gcG9ydCA4MDgwYCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFNFVCh7XHJcbiAgICAgICAgSFRUUDoge1xyXG4gICAgICAgICAgICBhcHBcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTsiLCJcclxuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0ICh7IFxyXG4gICAgSFRUUCxcclxuICAgIFNFVFxyXG59KSA9PiB7XHJcbiAgICBTRVQoe1xyXG4gICAgICAgIEhUVFBfQVBJOiBIVFRQLnVzZShleHByZXNzLmpzb24oKSlcclxuICAgIH0pO1xyXG59O1xyXG4iLCJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHtcclxuICAgIEhUVFBcclxufSkgPT4ge1xyXG4gICAgSFRUUC51c2UoZXhwcmVzcy5zdGF0aWMoYC4uL0JBRy9IVFRQX1BVQkxJQ2ApKTtcclxufTtcclxuXHJcbiIsImltcG9ydCBpc2VrYWkgZnJvbSBcImlzZWthaVwiO1xyXG5pc2VrYWkuU0VUKHtcIk5PREVcIjp7fSxcIkhUVFBcIjp7XCJwb3J0XCI6ODA4MH0sXCJIVFRQX0FQSVwiOnt9LFwiSFRUUF9QVUJMSUNcIjp7fX0pO1xyXG5cclxuaW1wb3J0IEhUVFAgZnJvbSBcIi4uL1NIT1AvSFRUUC9pbmRleC5qc1wiO1xyXG5pbXBvcnQgSFRUUF9BUEkgZnJvbSBcIi4uL1NIT1AvSFRUUF9BUEkvaW5kZXguanNcIjtcclxuaW1wb3J0IEhUVFBfUFVCTElDIGZyb20gXCIuLi9TSE9QL0hUVFBfUFVCTElDL2luZGV4LmpzXCI7XHJcbmlzZWthaS5FUVVJUCh7XHJcblx0SFRUUCxcclxuXHRIVFRQX0FQSSxcclxuXHRIVFRQX1BVQkxJQyxcclxufSk7XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsZ0JBQWUsQ0FBQztJQUNaLEdBQUcsRUFBRTtRQUNELElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQztRQUNaLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQztLQUNoQjtJQUNELEdBQUc7Q0FDTixLQUFLO0lBQ0YsTUFBTSxHQUFHLEdBQUc7UUFDUixJQUFJO1FBQ0osS0FBSzs7UUFFTCxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQUksS0FBSztZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQzlCOztRQUVELElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxLQUFLO1lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekQ7O1FBRUQsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksS0FBSztZQUN0QixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNWLEdBQUcsQ0FBQyxD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
