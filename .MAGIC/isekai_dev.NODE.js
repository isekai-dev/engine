'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var isekai = _interopDefault(require('isekai'));
var express = _interopDefault(require('express'));
var fs = _interopDefault(require('fs'));
var https = _interopDefault(require('https'));
var http = _interopDefault(require('http'));

var LOG = ({
    LOG: {
        left = `|⚙>`,
        right = `<⚙|`
    },
    SET
}) => {
    const LOG = {
        left,
        right,

        log: (...args) => {
            console.log(`\t`, ...args);
        },

        info: (...args) => {
            console.log(LOG.left, `\t`, ...args, `\t`, LOG.right);
        },

        section: (title, body) => {
            LOG.info(title);
            LOG(body);
            LOG(`\r`);
        }
    };

    SET({
        LOG: Object.assign(LOG.log, LOG)
    });
};

var HTTP = ({
    LOG,
    HTTP: {
        ssl = false
    },
    SET
}) => {
    const app = express();

    if(!LOG) {
        console.log(`[HTTP] REQUIRES [LOG]`);
        
        return;
    }

    if(ssl) {
        https.createServer({
            key: fs.readFileSync(`${ssl}/privkey.pem`),
            cert: fs.readFileSync(`${ssl}/cert.pem`),
            ca: fs.readFileSync(`${ssl}/fullchain.pem`)
        }, app).
            listen(443, () => {
                LOG.info(`[HTTPS]`);
                LOG(`BIFROST SECURED`);
            });

        const redirectApp = express();
    
        LOG(`Redirecting to HTTP to HTTPS`);

        redirectApp.all(`*`, (req, res) => {  
            res.redirect(`https://${req.headers.host}${req.url}`);
            res.end();
        });

        http.createServer(redirectApp).
            listen(80);

    } else {
        app.listen(8080, () => {
            LOG.info(`⚠️[HTTP]⚠️`);
            LOG(`BIFROST INSECURE`);
            LOG(`Listening on http://localhost:8080`);
        });
    }
    
    SET({
        HTTP: app
    });
};

var HTTP_API = ({ 
    HTTP,
    SET
}) => {
    SET({
        HTTP_API: HTTP.use(express.json())
    });
};

var HTTP_PUBLIC = ({
    HTTP
}) => {
    HTTP.use(express.static(`../ITEMS/HTTP_PUBLIC`));
};

isekai.SET({"NODE":{},"LOG":{},"HTTP":{"port":8080},"HTTP_API":{},"HTTP_PUBLIC":{}});

isekai.EQUIP({
    LOG,
    HTTP,
    HTTP_API,
    HTTP_PUBLIC,
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNla2FpX2Rldi5OT0RFLmpzIiwic291cmNlcyI6WyIuLi9TS0lMTFMvTE9HL2luZGV4LmpzIiwiLi4vU0tJTExTL0hUVFAvaW5kZXguanMiLCIuLi9TS0lMTFMvSFRUUF9BUEkvaW5kZXguanMiLCIuLi9TS0lMTFMvSFRUUF9QVUJMSUMvaW5kZXguanMiLCJpc2VrYWlfZGV2LmVudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0ICh7XHJcbiAgICBMT0c6IHtcclxuICAgICAgICBsZWZ0ID0gYHzimpk+YCxcclxuICAgICAgICByaWdodCA9IGA84pqZfGBcclxuICAgIH0sXHJcbiAgICBTRVRcclxufSkgPT4ge1xyXG4gICAgY29uc3QgTE9HID0ge1xyXG4gICAgICAgIGxlZnQsXHJcbiAgICAgICAgcmlnaHQsXHJcblxyXG4gICAgICAgIGxvZzogKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFxcdGAsIC4uLmFyZ3MpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluZm86ICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKExPRy5sZWZ0LCBgXFx0YCwgLi4uYXJncywgYFxcdGAsIExPRy5yaWdodCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2VjdGlvbjogKHRpdGxlLCBib2R5KSA9PiB7XHJcbiAgICAgICAgICAgIExPRy5pbmZvKHRpdGxlKTtcclxuICAgICAgICAgICAgTE9HKGJvZHkpO1xyXG4gICAgICAgICAgICBMT0coYFxccmApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgU0VUKHtcclxuICAgICAgICBMT0c6IE9iamVjdC5hc3NpZ24oTE9HLmxvZywgTE9HKVxyXG4gICAgfSk7XHJcbn07IiwiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xyXG5cclxuaW1wb3J0IGh0dHBzIGZyb20gXCJodHRwc1wiO1xyXG5pbXBvcnQgaHR0cCBmcm9tIFwiaHR0cFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHtcclxuICAgIExPRyxcclxuICAgIEhUVFA6IHtcclxuICAgICAgICBzc2wgPSBmYWxzZVxyXG4gICAgfSxcclxuICAgIFNFVFxyXG59KSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG4gICAgaWYoIUxPRykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBbSFRUUF0gUkVRVUlSRVMgW0xPR11gKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYoc3NsKSB7XHJcbiAgICAgICAgaHR0cHMuY3JlYXRlU2VydmVyKHtcclxuICAgICAgICAgICAga2V5OiBmcy5yZWFkRmlsZVN5bmMoYCR7c3NsfS9wcml2a2V5LnBlbWApLFxyXG4gICAgICAgICAgICBjZXJ0OiBmcy5yZWFkRmlsZVN5bmMoYCR7c3NsfS9jZXJ0LnBlbWApLFxyXG4gICAgICAgICAgICBjYTogZnMucmVhZEZpbGVTeW5jKGAke3NzbH0vZnVsbGNoYWluLnBlbWApXHJcbiAgICAgICAgfSwgYXBwKS5cclxuICAgICAgICAgICAgbGlzdGVuKDQ0MywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgTE9HLmluZm8oYFtIVFRQU11gKTtcclxuICAgICAgICAgICAgICAgIExPRyhgQklGUk9TVCBTRUNVUkVEYCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCByZWRpcmVjdEFwcCA9IGV4cHJlc3MoKTtcclxuICAgIFxyXG4gICAgICAgIExPRyhgUmVkaXJlY3RpbmcgdG8gSFRUUCB0byBIVFRQU2ApO1xyXG5cclxuICAgICAgICByZWRpcmVjdEFwcC5hbGwoYCpgLCAocmVxLCByZXMpID0+IHsgIFxyXG4gICAgICAgICAgICByZXMucmVkaXJlY3QoYGh0dHBzOi8vJHtyZXEuaGVhZGVycy5ob3N0fSR7cmVxLnVybH1gKTtcclxuICAgICAgICAgICAgcmVzLmVuZCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBodHRwLmNyZWF0ZVNlcnZlcihyZWRpcmVjdEFwcCkuXHJcbiAgICAgICAgICAgIGxpc3Rlbig4MCk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhcHAubGlzdGVuKDgwODAsICgpID0+IHtcclxuICAgICAgICAgICAgTE9HLmluZm8oYOKaoO+4j1tIVFRQXeKaoO+4j2ApO1xyXG4gICAgICAgICAgICBMT0coYEJJRlJPU1QgSU5TRUNVUkVgKTtcclxuICAgICAgICAgICAgTE9HKGBMaXN0ZW5pbmcgb24gaHR0cDovL2xvY2FsaG9zdDo4MDgwYCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFNFVCh7XHJcbiAgICAgICAgSFRUUDogYXBwXHJcbiAgICB9KTtcclxufTsiLCJcclxuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0ICh7IFxyXG4gICAgSFRUUCxcclxuICAgIFNFVFxyXG59KSA9PiB7XHJcbiAgICBTRVQoe1xyXG4gICAgICAgIEhUVFBfQVBJOiBIVFRQLnVzZShleHByZXNzLmpzb24oKSlcclxuICAgIH0pO1xyXG59O1xyXG4iLCJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHtcclxuICAgIEhUVFBcclxufSkgPT4ge1xyXG4gICAgSFRUUC51c2UoZXhwcmVzcy5zdGF0aWMoYC4uL0lURU1TL0hUVFBfUFVCTElDYCkpO1xyXG59O1xyXG5cclxuIiwiaW1wb3J0IGlzZWthaSBmcm9tIFwiaXNla2FpXCI7XHJcbmlzZWthaS5TRVQoe1wiTk9ERVwiOnt9LFwiTE9HXCI6e30sXCJIVFRQXCI6e1wicG9ydFwiOjgwODB9LFwiSFRUUF9BUElcIjp7fSxcIkhUVFBfUFVCTElDXCI6e319KTtcclxuXHJcbmltcG9ydCBMT0cgZnJvbSBcIi4uL1NLSUxMUy9MT0cvaW5kZXguanNcIjtcclxuaW1wb3J0IEhUVFAgZnJvbSBcIi4uL1NLSUxMUy9IVFRQL2luZGV4LmpzXCI7XHJcbmltcG9ydCBIVFRQX0FQSSBmcm9tIFwiLi4vU0tJTExTL0hUVFBfQVBJL2luZGV4LmpzXCI7XHJcbmltcG9ydCBIVFRQX1BVQkxJQyBmcm9tIFwiLi4vU0tJTExTL0hUVFBfUFVCTElDL2luZGV4LmpzXCI7XHJcblxuaXNla2FpLkVRVUlQKHtcclxuICAgIExPRyxcclxuICAgIEhUVFAsXHJcbiAgICBIVFRQX0FQSSxcclxuICAgIEhUVFBfUFVCTElDLFxyXG59KTtcclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxVQUFlLENBQUM7SUFDWixHQUFHLEVBQUU7UUFDRCxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDWixLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUM7S0FDaEI7SUFDRCxHQUFHO0NBQ04sS0FBSztJQUNGLE1BQU0sR0FBRyxHQUFHO1FBQ1IsSUFBSTtRQUNKLEtBQUs7O1FBRUwsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLEtBQUs7WUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUM5Qjs7UUFFRCxJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksS0FBSztZQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pEOztRQUVELE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLEtBQUs7WUFDdEIsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDVixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMs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
